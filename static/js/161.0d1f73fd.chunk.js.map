{"version":3,"file":"static/js/161.0d1f73fd.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelector.js","webpack://react-homework-template/./src/components/ContactsItem/ContactsItem.module.css?8722","components/ContactsItem/ContactsItem.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/FormAddPhone/FormAddPhone.module.css?a7b3","components/FormAddPhone/FormAddPhone.jsx","redux/filter/filterSelector.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","pages/UserPage/UserPage.jsx","redux/auth/auth-selectors.js"],"sourcesContent":["export const getContacts = ({contacts}) => contacts.items;\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error});\nexport const getFilteredContacts = ({filter, contacts }) => {   \n    if (!filter) {\n        return contacts.items;\n    }\n\n    const registerFilter = filter.toLocaleLowerCase();\n    const filterContacts = contacts.items.filter(({ name }) => {\n      const registerName = name.toLocaleLowerCase();\n      const result = registerName.includes(registerFilter);\n      return result;\n    })\n  \n    return filterContacts;\n}","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ContactsItem_listItem__5AWn7\",\"deleteItem\":\"ContactsItem_deleteItem__Jq2A-\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact} from \"redux/contacts/contactsOperations.js\";\n// import { setFilter } from \"redux/filter/filterSlice\";\n// import { getFilter } from \"redux/filter/filterSelector\";\nimport { getFilteredContacts } from \"redux/contacts/contactsSelector\";\n\n\nimport css from 'components/ContactsItem/ContactsItem.module.css'\nimport PropTypes from \"prop-types\";\n\nfunction ContactsItem() {\n\n    const contacts = useSelector(getFilteredContacts);\n    const dispatch = useDispatch();\n    \n      const onDeleteContact = (id) => {\n       const action = deleteContact(id);\n        dispatch(action);\n}\n    \n    const elements = contacts.map(({ name, number, id }) => {\n        return <li className={css.listItem} key={id}>{name}: {number}\n            <span className={css.deleteItem} onClick={() => onDeleteContact(id)}>Delete</span></li>\n    })\n        return (\n           <>\n            <ol>{elements}</ol>\n        </>\n        )\n}\n\nexport default ContactsItem \n\nContactsItem.defaultProps = {\n    items: []\n}\n\nContactsItem.propTypes = {\n    items: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }))\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"titleInput\":\"FormAddPhone_titleInput__W4zcS\",\"input\":\"FormAddPhone_input__liDne\",\"formGrup\":\"FormAddPhone_formGrup__loc3f\",\"button\":\"FormAddPhone_button__1UklK\"};","import PropTypes from \"prop-types\";\nimport { addContact } from \"redux/contacts/contactsOperations.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport css from 'components/FormAddPhone/FormAddPhone.module.css'\n\nimport { getFilteredContacts } from \"redux/contacts/contactsSelector\";\n\nexport default function FormAddPhone() {\n    const dispatch = useDispatch();\n     const contacts = useSelector(getFilteredContacts);\n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    \n    const nameId = nanoid();\n    const numberId = nanoid();\n   \n    const handelChange = (event) => {\n        const { name, value } = event.target;\n        switch (name) {\n            case 'name':\n                return setName(value);\n            case 'number':\n                return setNumber(value);\n            \n            default:\n                return;\n        }\n       }\n      \n    const isCopy = ({ name }) => {\n    const result = contacts.find((item) => item.name === name);\n    return result;\n  }\n    \n     const onAddContact = (contact) => {\n     if (isCopy(contact)) {\n        return alert(`${contact.name} is already in contacts`);\n    }\n    \n    const action = addContact(contact);\n        dispatch(action);\n    \n  }\n   \n    const handelSabmit = (event) => {\n        event.preventDefault();\n        onAddContact({ name, number });\n        setName((name) => name = '');\n        setNumber((number) => number = '');\n        }\n\n\nreturn (\n                <form onSubmit={handelSabmit}>\n                    <div className={css.formGrup}>\n                        <label className={css.titleInput} htmlFor=\"name\">Name</label><br />\n                        <input className={css.input}\n                            id={nameId}\n                            type=\"text\"\n                            value={name}\n                            name='name'\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            required\n                            onChange={handelChange}\n                        />\n                    </div>\n                    <div className={css.formGrup}>\n                        <label className={css.titleInput} htmlFor=\"number\">Number</label><br />\n                        <input className={css.input}\n                            id={numberId}\n                            type=\"tel\"\n                            name='number'\n                            value={number}\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                            required\n                            onChange={handelChange}\n                            />\n                    </div>\n                    <button className={css.button}>Add contact</button>\n                </form>\n    )\n    \n    }\n\n\n\nFormAddPhone.propTypes = {\n\n    name: PropTypes.string,\n    number: PropTypes.string,\n    \n}","export const getFilter = store => store.filter;","// extracted by mini-css-extract-plugin\nexport default {\"titleInput\":\"Filter_titleInput__KwdM2\",\"input\":\"Filter_input__N7T3z\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { setFilter } from \"redux/filter/filterSlice\";\nimport { getFilter } from \"redux/filter/filterSelector\";\nimport css from 'components/Filter/Filter.module.css'\nimport PropTypes from \"prop-types\";\n\nconst Filter = () => {\n      const filter = useSelector(getFilter);\n       const dispatch = useDispatch();\n    \n       const handelChange = (event) => {\n       const { value } = event.target;\n       dispatch(setFilter(value));\n  }\n\n    return (\n        <div className={css.formGrup}>\n            <label className={css.titleInput}>Find contacts by name</label><br />\n            <input className={css.input} type='text' name=\"filter\" onChange={handelChange} value={filter} />\n        </div>\n)\n\n}\n\nexport default Filter\n\nFilter.propTypes = {\n\n    filter: PropTypes.string,\n     handelChange: PropTypes.func.isRequired,\n    \n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ContactsList_title__Nc-fb\"};","import { useEffect } from \"react\";\n// import { nanoid } from \"nanoid\";\nimport ContactsItem from 'components/ContactsItem/ContactsItem.jsx';\nimport FormAddPhone from 'components/FormAddPhone/FormAddPhone.jsx';\nimport Filter from \"components/Filter/Filter.jsx\";\nimport css from 'components/ContactsList/ContactsList.module.css'\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/contactsOperations.js\";\nimport { getState, getFilteredContacts } from \"redux/contacts/contactsSelector.js\";\n\n\nexport function ContactsList() {\n  \n  const contacts = useSelector(getFilteredContacts);\n  const {loading, error} = useSelector(getState);\n  const dispatch = useDispatch();\n\n\nuseEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n  \n\n return (\n      <div\n        style={{\n          // height: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 40,\n          color: '#010101'\n        }}\n      >\n        <h2 className={css.title}>Phonebook</h2>\n          <FormAddPhone />\n              <Filter/>\n              <h2 className={css.title}>Contacts</h2>\n          {!loading && contacts.length > 0 && <ContactsItem contacts={contacts} />}\n          {error && <p>oops, something went wrong</p>}\n      </div>\n    );\n      }\n \n\nContactsList.propTypes = {\n\n    contacts: PropTypes.array,\n    filter: PropTypes.string,\n    \n}","import React from \"react\";\nimport { ContactsList } from \"components/ContactsList/ContactsList\";\nimport { getIsLogin } from \"redux/auth/auth-selectors\";\nimport { useSelector } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\n\nexport default function ContactsPage() {\n\n    const isLogin = useSelector(getIsLogin);\n    console.log(getIsLogin);\n\n      if (!isLogin) {\n        return <Navigate to=\"/login\" />\n    } \n\n    return (\n        <div>\n            <ContactsList />\n        </div>\n    )\n}","export const getIsLogin = ({ auth }) => auth.isLogin;\nexport const getUser = ({auth}) => auth.user;"],"names":["getState","contacts","loading","error","getFilteredContacts","filter","items","registerFilter","toLocaleLowerCase","name","includes","ContactsItem","useSelector","dispatch","useDispatch","elements","map","number","id","className","css","onClick","action","deleteContact","onDeleteContact","defaultProps","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","FormAddPhone","useState","setName","setNumber","nameId","numberId","handelChange","event","target","value","onAddContact","contact","find","item","isCopy","alert","addContact","onSubmit","preventDefault","htmlFor","type","pattern","title","required","onChange","getFilter","store","setFilter","ContactsList","useEffect","fetchContacts","style","display","flexDirection","justifyContent","alignItems","fontSize","color","length","ContactsPage","isLogin","getIsLogin","console","log","to","auth","getUser","user"],"sourceRoot":""}